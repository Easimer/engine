// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EDICT_SCHEMAS_NETWORKING_H_
#define FLATBUFFERS_GENERATED_EDICT_SCHEMAS_NETWORKING_H_

#include "flatbuffers/flatbuffers.h"

#include "base_generated.h"

namespace Schemas {
namespace Networking {

struct StringIdentifier;

struct EntityUpdate;

struct ConnectData;

struct ServerData;

struct MessageHeader;

enum MessageType {
  MessageType_NONE = 0,
  MessageType_CONNECT = 1,
  MessageType_CONNECT_ACK = 2,
  MessageType_CONNECT_NAK = 3,
  MessageType_DISCONNECT = 4,
  MessageType_DISCOVERY_PROBE = 5,
  MessageType_DISCOVERY_RESPONSE = 6,
  MessageType_ENTITY_UPDATE = 7,
  MessageType_CLIENT_UPDATE = 8,
  MessageType_ECHO_REQUEST = 9,
  MessageType_ECHO_REPLY = 10,
  MessageType_QUERY_REQUEST = 11,
  MessageType_QUERY_REPLY = 12,
  MessageType_MIN = MessageType_NONE,
  MessageType_MAX = MessageType_QUERY_REPLY
};

inline MessageType (&EnumValuesMessageType())[13] {
  static MessageType values[] = {
    MessageType_NONE,
    MessageType_CONNECT,
    MessageType_CONNECT_ACK,
    MessageType_CONNECT_NAK,
    MessageType_DISCONNECT,
    MessageType_DISCOVERY_PROBE,
    MessageType_DISCOVERY_RESPONSE,
    MessageType_ENTITY_UPDATE,
    MessageType_CLIENT_UPDATE,
    MessageType_ECHO_REQUEST,
    MessageType_ECHO_REPLY,
    MessageType_QUERY_REQUEST,
    MessageType_QUERY_REPLY
  };
  return values;
}

inline const char **EnumNamesMessageType() {
  static const char *names[] = {
    "NONE",
    "CONNECT",
    "CONNECT_ACK",
    "CONNECT_NAK",
    "DISCONNECT",
    "DISCOVERY_PROBE",
    "DISCOVERY_RESPONSE",
    "ENTITY_UPDATE",
    "CLIENT_UPDATE",
    "ECHO_REQUEST",
    "ECHO_REPLY",
    "QUERY_REQUEST",
    "QUERY_REPLY",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMessageType()[index];
}

enum ConnectionNakReason {
  ConnectionNakReason_RESERVED = 0,
  ConnectionNakReason_ALREADY_CONNECTED = 1,
  ConnectionNakReason_NAME_UNAVAILABLE = 2,
  ConnectionNakReason_FULL = 3,
  ConnectionNakReason_MIN = ConnectionNakReason_RESERVED,
  ConnectionNakReason_MAX = ConnectionNakReason_FULL
};

inline ConnectionNakReason (&EnumValuesConnectionNakReason())[4] {
  static ConnectionNakReason values[] = {
    ConnectionNakReason_RESERVED,
    ConnectionNakReason_ALREADY_CONNECTED,
    ConnectionNakReason_NAME_UNAVAILABLE,
    ConnectionNakReason_FULL
  };
  return values;
}

inline const char **EnumNamesConnectionNakReason() {
  static const char *names[] = {
    "RESERVED",
    "ALREADY_CONNECTED",
    "NAME_UNAVAILABLE",
    "FULL",
    nullptr
  };
  return names;
}

inline const char *EnumNameConnectionNakReason(ConnectionNakReason e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesConnectionNakReason()[index];
}

enum MessageData {
  MessageData_NONE = 0,
  MessageData_ConnectData = 1,
  MessageData_EntityUpdate = 2,
  MessageData_ServerData = 3,
  MessageData_MIN = MessageData_NONE,
  MessageData_MAX = MessageData_ServerData
};

inline MessageData (&EnumValuesMessageData())[4] {
  static MessageData values[] = {
    MessageData_NONE,
    MessageData_ConnectData,
    MessageData_EntityUpdate,
    MessageData_ServerData
  };
  return values;
}

inline const char **EnumNamesMessageData() {
  static const char *names[] = {
    "NONE",
    "ConnectData",
    "EntityUpdate",
    "ServerData",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageData(MessageData e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMessageData()[index];
}

template<typename T> struct MessageDataTraits {
  static const MessageData enum_value = MessageData_NONE;
};

template<> struct MessageDataTraits<ConnectData> {
  static const MessageData enum_value = MessageData_ConnectData;
};

template<> struct MessageDataTraits<EntityUpdate> {
  static const MessageData enum_value = MessageData_EntityUpdate;
};

template<> struct MessageDataTraits<ServerData> {
  static const MessageData enum_value = MessageData_ServerData;
};

bool VerifyMessageData(flatbuffers::Verifier &verifier, const void *obj, MessageData type);
bool VerifyMessageDataVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct StringIdentifier FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           verifier.EndTable();
  }
};

struct StringIdentifierBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(StringIdentifier::VT_ID, id);
  }
  explicit StringIdentifierBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StringIdentifierBuilder &operator=(const StringIdentifierBuilder &);
  flatbuffers::Offset<StringIdentifier> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StringIdentifier>(end);
    return o;
  }
};

inline flatbuffers::Offset<StringIdentifier> CreateStringIdentifier(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0) {
  StringIdentifierBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<StringIdentifier> CreateStringIdentifierDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr) {
  return Schemas::Networking::CreateStringIdentifier(
      _fbb,
      id ? _fbb.CreateString(id) : 0);
}

struct EntityUpdate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EDICT_ID = 4,
    VT_POS = 6,
    VT_ROT = 8,
    VT_MODEL = 10,
    VT_LAST_UPDATE = 12
  };
  uint64_t edict_id() const {
    return GetField<uint64_t>(VT_EDICT_ID, 0);
  }
  bool KeyCompareLessThan(const EntityUpdate *o) const {
    return edict_id() < o->edict_id();
  }
  int KeyCompareWithValue(uint64_t val) const {
    const auto key = edict_id();
    if (key < val) {
      return -1;
    } else if (key > val) {
      return 1;
    } else {
      return 0;
    }
  }
  const Schemas::Vector3 *pos() const {
    return GetStruct<const Schemas::Vector3 *>(VT_POS);
  }
  const Schemas::Matrix4x4 *rot() const {
    return GetPointer<const Schemas::Matrix4x4 *>(VT_ROT);
  }
  const flatbuffers::String *model() const {
    return GetPointer<const flatbuffers::String *>(VT_MODEL);
  }
  float last_update() const {
    return GetField<float>(VT_LAST_UPDATE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_EDICT_ID) &&
           VerifyField<Schemas::Vector3>(verifier, VT_POS) &&
           VerifyOffset(verifier, VT_ROT) &&
           verifier.VerifyTable(rot()) &&
           VerifyOffset(verifier, VT_MODEL) &&
           verifier.Verify(model()) &&
           VerifyField<float>(verifier, VT_LAST_UPDATE) &&
           verifier.EndTable();
  }
};

struct EntityUpdateBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_edict_id(uint64_t edict_id) {
    fbb_.AddElement<uint64_t>(EntityUpdate::VT_EDICT_ID, edict_id, 0);
  }
  void add_pos(const Schemas::Vector3 *pos) {
    fbb_.AddStruct(EntityUpdate::VT_POS, pos);
  }
  void add_rot(flatbuffers::Offset<Schemas::Matrix4x4> rot) {
    fbb_.AddOffset(EntityUpdate::VT_ROT, rot);
  }
  void add_model(flatbuffers::Offset<flatbuffers::String> model) {
    fbb_.AddOffset(EntityUpdate::VT_MODEL, model);
  }
  void add_last_update(float last_update) {
    fbb_.AddElement<float>(EntityUpdate::VT_LAST_UPDATE, last_update, 0.0f);
  }
  explicit EntityUpdateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EntityUpdateBuilder &operator=(const EntityUpdateBuilder &);
  flatbuffers::Offset<EntityUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EntityUpdate>(end);
    return o;
  }
};

inline flatbuffers::Offset<EntityUpdate> CreateEntityUpdate(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t edict_id = 0,
    const Schemas::Vector3 *pos = 0,
    flatbuffers::Offset<Schemas::Matrix4x4> rot = 0,
    flatbuffers::Offset<flatbuffers::String> model = 0,
    float last_update = 0.0f) {
  EntityUpdateBuilder builder_(_fbb);
  builder_.add_edict_id(edict_id);
  builder_.add_last_update(last_update);
  builder_.add_model(model);
  builder_.add_rot(rot);
  builder_.add_pos(pos);
  return builder_.Finish();
}

inline flatbuffers::Offset<EntityUpdate> CreateEntityUpdateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t edict_id = 0,
    const Schemas::Vector3 *pos = 0,
    flatbuffers::Offset<Schemas::Matrix4x4> rot = 0,
    const char *model = nullptr,
    float last_update = 0.0f) {
  return Schemas::Networking::CreateEntityUpdate(
      _fbb,
      edict_id,
      pos,
      rot,
      model ? _fbb.CreateString(model) : 0,
      last_update);
}

struct ConnectData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_USERNAME = 4,
    VT_CONN_ID = 6,
    VT_NAK_REASON = 8
  };
  const flatbuffers::String *username() const {
    return GetPointer<const flatbuffers::String *>(VT_USERNAME);
  }
  uint64_t conn_id() const {
    return GetField<uint64_t>(VT_CONN_ID, 0);
  }
  ConnectionNakReason nak_reason() const {
    return static_cast<ConnectionNakReason>(GetField<int64_t>(VT_NAK_REASON, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.Verify(username()) &&
           VerifyField<uint64_t>(verifier, VT_CONN_ID) &&
           VerifyField<int64_t>(verifier, VT_NAK_REASON) &&
           verifier.EndTable();
  }
};

struct ConnectDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_username(flatbuffers::Offset<flatbuffers::String> username) {
    fbb_.AddOffset(ConnectData::VT_USERNAME, username);
  }
  void add_conn_id(uint64_t conn_id) {
    fbb_.AddElement<uint64_t>(ConnectData::VT_CONN_ID, conn_id, 0);
  }
  void add_nak_reason(ConnectionNakReason nak_reason) {
    fbb_.AddElement<int64_t>(ConnectData::VT_NAK_REASON, static_cast<int64_t>(nak_reason), 0);
  }
  explicit ConnectDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ConnectDataBuilder &operator=(const ConnectDataBuilder &);
  flatbuffers::Offset<ConnectData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ConnectData>(end);
    return o;
  }
};

inline flatbuffers::Offset<ConnectData> CreateConnectData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> username = 0,
    uint64_t conn_id = 0,
    ConnectionNakReason nak_reason = ConnectionNakReason_RESERVED) {
  ConnectDataBuilder builder_(_fbb);
  builder_.add_nak_reason(nak_reason);
  builder_.add_conn_id(conn_id);
  builder_.add_username(username);
  return builder_.Finish();
}

inline flatbuffers::Offset<ConnectData> CreateConnectDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    uint64_t conn_id = 0,
    ConnectionNakReason nak_reason = ConnectionNakReason_RESERVED) {
  return Schemas::Networking::CreateConnectData(
      _fbb,
      username ? _fbb.CreateString(username) : 0,
      conn_id,
      nak_reason);
}

struct ServerData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_PLAYERS = 6,
    VT_MAX_PLAYERS = 8,
    VT_LEVEL = 10
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint64_t players() const {
    return GetField<uint64_t>(VT_PLAYERS, 0);
  }
  uint64_t max_players() const {
    return GetField<uint64_t>(VT_MAX_PLAYERS, 0);
  }
  const flatbuffers::String *level() const {
    return GetPointer<const flatbuffers::String *>(VT_LEVEL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<uint64_t>(verifier, VT_PLAYERS) &&
           VerifyField<uint64_t>(verifier, VT_MAX_PLAYERS) &&
           VerifyOffset(verifier, VT_LEVEL) &&
           verifier.Verify(level()) &&
           verifier.EndTable();
  }
};

struct ServerDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(ServerData::VT_NAME, name);
  }
  void add_players(uint64_t players) {
    fbb_.AddElement<uint64_t>(ServerData::VT_PLAYERS, players, 0);
  }
  void add_max_players(uint64_t max_players) {
    fbb_.AddElement<uint64_t>(ServerData::VT_MAX_PLAYERS, max_players, 0);
  }
  void add_level(flatbuffers::Offset<flatbuffers::String> level) {
    fbb_.AddOffset(ServerData::VT_LEVEL, level);
  }
  explicit ServerDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ServerDataBuilder &operator=(const ServerDataBuilder &);
  flatbuffers::Offset<ServerData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ServerData>(end);
    return o;
  }
};

inline flatbuffers::Offset<ServerData> CreateServerData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint64_t players = 0,
    uint64_t max_players = 0,
    flatbuffers::Offset<flatbuffers::String> level = 0) {
  ServerDataBuilder builder_(_fbb);
  builder_.add_max_players(max_players);
  builder_.add_players(players);
  builder_.add_level(level);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<ServerData> CreateServerDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t players = 0,
    uint64_t max_players = 0,
    const char *level = nullptr) {
  return Schemas::Networking::CreateServerData(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      players,
      max_players,
      level ? _fbb.CreateString(level) : 0);
}

struct MessageHeader FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_DATA_TYPE = 6,
    VT_DATA = 8
  };
  MessageType type() const {
    return static_cast<MessageType>(GetField<int64_t>(VT_TYPE, 0));
  }
  MessageData data_type() const {
    return static_cast<MessageData>(GetField<uint8_t>(VT_DATA_TYPE, 0));
  }
  const void *data() const {
    return GetPointer<const void *>(VT_DATA);
  }
  template<typename T> const T *data_as() const;
  const ConnectData *data_as_ConnectData() const {
    return data_type() == MessageData_ConnectData ? static_cast<const ConnectData *>(data()) : nullptr;
  }
  const EntityUpdate *data_as_EntityUpdate() const {
    return data_type() == MessageData_EntityUpdate ? static_cast<const EntityUpdate *>(data()) : nullptr;
  }
  const ServerData *data_as_ServerData() const {
    return data_type() == MessageData_ServerData ? static_cast<const ServerData *>(data()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_DATA_TYPE) &&
           VerifyOffset(verifier, VT_DATA) &&
           VerifyMessageData(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

template<> inline const ConnectData *MessageHeader::data_as<ConnectData>() const {
  return data_as_ConnectData();
}

template<> inline const EntityUpdate *MessageHeader::data_as<EntityUpdate>() const {
  return data_as_EntityUpdate();
}

template<> inline const ServerData *MessageHeader::data_as<ServerData>() const {
  return data_as_ServerData();
}

struct MessageHeaderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(MessageType type) {
    fbb_.AddElement<int64_t>(MessageHeader::VT_TYPE, static_cast<int64_t>(type), 0);
  }
  void add_data_type(MessageData data_type) {
    fbb_.AddElement<uint8_t>(MessageHeader::VT_DATA_TYPE, static_cast<uint8_t>(data_type), 0);
  }
  void add_data(flatbuffers::Offset<void> data) {
    fbb_.AddOffset(MessageHeader::VT_DATA, data);
  }
  explicit MessageHeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageHeaderBuilder &operator=(const MessageHeaderBuilder &);
  flatbuffers::Offset<MessageHeader> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MessageHeader>(end);
    return o;
  }
};

inline flatbuffers::Offset<MessageHeader> CreateMessageHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    MessageType type = MessageType_NONE,
    MessageData data_type = MessageData_NONE,
    flatbuffers::Offset<void> data = 0) {
  MessageHeaderBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

inline bool VerifyMessageData(flatbuffers::Verifier &verifier, const void *obj, MessageData type) {
  switch (type) {
    case MessageData_NONE: {
      return true;
    }
    case MessageData_ConnectData: {
      auto ptr = reinterpret_cast<const ConnectData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageData_EntityUpdate: {
      auto ptr = reinterpret_cast<const EntityUpdate *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageData_ServerData: {
      auto ptr = reinterpret_cast<const ServerData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyMessageDataVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageData(
        verifier,  values->Get(i), types->GetEnum<MessageData>(i))) {
      return false;
    }
  }
  return true;
}

inline const Schemas::Networking::MessageHeader *GetMessageHeader(const void *buf) {
  return flatbuffers::GetRoot<Schemas::Networking::MessageHeader>(buf);
}

inline const Schemas::Networking::MessageHeader *GetSizePrefixedMessageHeader(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Schemas::Networking::MessageHeader>(buf);
}

inline bool VerifyMessageHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Schemas::Networking::MessageHeader>(nullptr);
}

inline bool VerifySizePrefixedMessageHeaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Schemas::Networking::MessageHeader>(nullptr);
}

inline void FinishMessageHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Schemas::Networking::MessageHeader> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageHeaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Schemas::Networking::MessageHeader> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Networking
}  // namespace Schemas

#endif  // FLATBUFFERS_GENERATED_EDICT_SCHEMAS_NETWORKING_H_
